{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","username","react_default","a","createElement","className","alt","src","concat","CardList","robots","cardComponent","map","user","i","Components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onSearchChange","event","target","value","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","Components_SearchBox","Components_Scroll","ErrorBoundary","Components_CardList","Boolean","window","location","hostname","match","ReactDOM","render","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.77668f47.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id, username}) => {\n\t\n\treturn(\n\n\t<div className= 'bg-light-green dib br2 pa2 ma3 grow bw2 shadow-2' >\n\t\t<img alt = 'robots' src ={`https://robohash.org/${id}${id}color?200x200`}/>\n\t\t<div>\n\t\t<h2>{name}</h2>\n\t\t<p>{username}</p>\n\t\t<p>{email}</p>\n\t\t</div>\n\t</div>\n\t\t);\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\n\nconst CardList = ({robots})=>{\n\t\t\t\n\tconst cardComponent = robots.map((user,i)=>{\n\t// \tif (true){\n\t// throw new Error(\"nooooo!\");\n\t// }\n\t\treturn (\n\t\t\t<Card key={i}\n\t\t\tid={robots[i].id} \n\t\t\tname ={robots[i].name} \n\t\t\tusername ={robots[i].username} \n\t\t\temail ={robots[i].email}/>)\t})\n\treturn (\n<div> \n\t{cardComponent}\n</div>\n\t\t);\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchfield,searchChange}) => {\n\treturn(\n\t\t<div className = 'pa2'>\n\t\t\t<input \n\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\n\t\t\ttype = 'seach' \n\t\t\tplaceholder = 'Search Robots'\n\t\t\tonChange = {searchChange}\n\t\t\t/>\n\t\t</div>\n\t\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\nreturn (\n\t<div style={{overflowY: 'scroll',border: '0px solid black',height: '500px'}}>\n\t\t{props.children}\n\t</div>\n\t);\n};\n export default Scroll;\n","import React, {Component} from 'react';\nclass ErrorBoundry extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\tcomponetDidCatch(error,info){\n\t\tthis.setState({hasError:true})\n\t}\n\trender(){\n\t\tif (this.state.hasError){\n\t\t\treturn <h1>Ooops. This is not good</h1>\n\t\t} \n\t\treturn this.props.children\n\t}\n}\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox';\nimport Scroll from '../Components/Scroll';\nimport ErrorBoundary from '../Components/ErrorBoundary';\nimport './App.css';\n\n\nclass App extends Component {\n\tconstructor()\n\t{ super()\n\t\tthis.state =\n\t\t{\n\t\trobots: [],\n\t\tsearchfield: ''\t\n\t\t}\n\t}\n\tcomponentDidMount()\n\t{\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then(response=>{\n\t\t\treturn response.json();\n\t\t})\n\t\t.then(users=>{\n\t\t\tthis.setState({robots:users});\n\t\t})\n\t\t\n\t}\n\tonSearchChange = (event) =>{\n\t\tthis.setState({searchfield: event.target.value})\n\n\t\t\n\n\t}\n\trender(){\n\tconst {robots, searchfield}=this.state;\n\tconst filteredRobots = robots.filter(robot =>{\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\n\t\t})\n\treturn !robots.length?\n\t\t<h1>Loading</h1> :\n\t(\n\t\n\t\t<div className = 'tc'>\n\t\t<h1 className= 'F1'>RoboFriends</h1>\n\t\t<SearchBox searchChange= {this.onSearchChange}/>\n\t\t\n\t\t<Scroll>\n\t\t<ErrorBoundary>\n\t\t<CardList robots={filteredRobots} />\n\t\t</ErrorBoundary>\n\t\t</Scroll>\n\t\t\n\t\t</div>\t\n\t\t);\n\n}\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // it means same directory\nimport 'tachyons';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}